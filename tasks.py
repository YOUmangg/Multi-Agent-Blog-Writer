from crewai import Task, LLM
# from crewai.tools import DuckDuckGoSearchRun
from tools import DuckDuckGoSearchTool, ImageGenerationTool
from agents import researcher, writer, editor, images_generator
from Output_Formats import Image_output  

# Initialize the LLM
llm = LLM(
    model="gemini/gemini-2.0-flash",    
    temperature=0.7,
)

research_task = Task(
    description="Find trending tech topics and top SEO keywords for blogging.",
    agent=researcher,
    backstory="You are a content strategist who specializes in identifying trending topics and SEO keywords.",
    expected_output="A list of trending topics and a set of relevant SEO keywords, which are less than 500 words in total.",
    tools=[DuckDuckGoSearchTool()]
)

writing_task = Task(
    description="Write a {word_limit}-word SEO-optimized blog based on the research findings.",
    agent=writer,
    backstory="You are a creative AI writer skilled at crafting engaging blog posts.",
    expected_output="A complete blog post in Markdown format, including title, headings, sub-headings and SEO keywords at the end.",
    context=[research_task]
)

image_generation_task = Task(
    description="Generate images for the blog post utilizing the Image generation tool based on the content provided by the Writer agent in a \
        pydantic format.",
    agent=images_generator,
    backstory="You are an AI image generator that creates visually appealing images to enhance the blog post, using the Image Generation Tool.",
    expected_output="A set of images with metadata, including sub-heading, image URL or path, description, and tags stored in \
        a pydantic model called Image_output.",
    tool = [ImageGenerationTool()],  # This tool is defined in tools.py
    output_pydantic = Image_output,  #Image_output is defined in Output_Formats.py
    context=[writing_task]
)

editing_task = Task(
    description="Review and edit the blog post for clarity, grammar, and SEO optimization. Also, insert the images \
        (links along with description) generated by the Images Generator agent into the blog post. The images are stored \
            in a pydantic model called Image_output.",
    agent=editor,
    backstory="You are an experienced editor with a keen eye for detail and SEO best practices.",
    expected_output="A polished blog post ready for publication, with suggestions for improvement if needed.",
    context=[image_generation_task, writing_task]
)
